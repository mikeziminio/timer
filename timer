#!/usr/bin/python3.12

import functools
import sqlite3
import sys
import typing
from datetime import datetime, timedelta
import zoneinfo
from collections.abc import Sequence

from settings import settings
from data import seconds_to_hms, Period, TimerDB


class Controller:

    def __init__(self, timer_db_class):
        self.timerDB = timer_db_class()

    def start(self, comment: str = None):
        self.timerDB.stop_current_period()
        self.timerDB.start_new_period(comment)
        self.current()

    def stop(self, comment: str = None):
        self.timerDB.stop_current_period(comment)
        self.statistics(1)

    def pause(self):
        statistics = self.timerDB.get_current_statistics()
        if statistics:
            print(statistics)
            pause_begin = datetime.now()
            input('Задача на паузе нажмите Enter')
            pause_end = datetime.now()
            pause_time = (pause_end - pause_begin).seconds
            self.timerDB.add_pause_time(pause_time)
            statistics = self.timerDB.get_current_statistics()
            if statistics:
                print(statistics)

    def current(self, comment: str = None):
        if comment:
            self.timerDB.update_current_comment(comment)
        statistics = self.timerDB.get_current_statistics()
        if statistics:
            print(statistics)

    def statistics(self, days: int):

        local_zone = zoneinfo.ZoneInfo(settings['time_zone_name'])
        now = datetime.now(tz=local_zone)
        start_of_today = datetime(
            year=now.year,
            month=now.month,
            day=now.day,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo=local_zone
        )
        from_time = start_of_today - timedelta(days=days - 1)

        periods_by_date = {}

        periods = list(self.timerDB.get_periods(from_time.timestamp()))
        for period in periods:
            period_date = datetime.fromtimestamp(period.time_start, tz=local_zone).strftime('%d.%m.%Y')
            periods_by_date.setdefault(period_date, []).append(period)

        for date, _periods in periods_by_date.items():
            day_total_seconds = 0
            for period in _periods:
                print(period)
                if period.time_end is not None:
                    day_total_seconds += (period.time_end - period.time_start) - period.pause_time
            h, m, s = seconds_to_hms(day_total_seconds)
            print(f'{date}\t{h:02d}:{m:02d}:{s:02d}\n')

    def main(self, argv: Sequence):
        match argv:
            case (_, 'start'):
                self.start()
            case (_, 'start', comment):
                self.start(comment)
            case (_, 'stop'):
                self.stop()
            case (_, 'stop', comment):
                self.stop(comment)
            case (_, 'pause'):
                self.pause()
            case (_, 'current'):
                self.current()
            case (_, 'current', comment):
                self.current(comment)
            case (_, 'today') | (_, ):
                self.statistics(1)
            case (_, days, 'days'):
                days = int(days)
                if days < 1:
                    print('введите значение >= 1')
                else:
                    self.statistics(int(days))
            case _:
                print('неизвестная команда')


controller = Controller(TimerDB)
controller.main(sys.argv)
