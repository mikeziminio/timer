#!/usr/bin/python3.12

import functools
import sqlite3
import sys
import time
import typing
from datetime import datetime, timedelta
import zoneinfo
from collections.abc import Sequence

settings = {
    'time_zone_name': 'Europe/Ulyanovsk',
    'sqlite_db_path': '/var/www/timer/timer.db',
}


def seconds_to_hms(sec: float | int) -> tuple:
    hours = int(sec // 3600)
    minutes = int((sec % 3600) // 60)
    seconds = int(sec % 60)
    return hours, minutes, seconds


class Period(typing.NamedTuple):
    time_start: float
    time_end: float
    hours: int
    minutes: int
    seconds: int
    comment: str

    def __repr__(self):

        local_zone = zoneinfo.ZoneInfo(settings['time_zone_name'])

        if self.time_start is None:
            datetime_start = '--:--:--'
        else:
            datetime_start = datetime.fromtimestamp(self.time_start, tz=local_zone).strftime('%d.%m.%Y %H:%M:%S')

        if self.time_end is None:
            datetime_end = '--:--:--'
        else:
            datetime_end = datetime.fromtimestamp(self.time_end, tz=local_zone).strftime('%H:%M:%S')

        if self.comment is None:
            comment = ''
        else:
            comment = self.comment

        if self.time_end is None:
            duration = '--:--:--'
        else:
            duration = f'{self.hours:02d}:{self.minutes:02d}:{self.seconds:02d}'

        return f'{datetime_start}\t{datetime_end}\t{duration}\t{comment}'


class TimerDB:

    sqlite_db_path = settings['sqlite_db_path']

    @functools.cache
    def get_connection(self):
        connection = sqlite3.connect(self.sqlite_db_path)
        connection.autocommit = False
        return connection

    def set_initial_state(self):
        con = self.get_connection()
        con.execute('''
            DROP TABLE IF EXISTS period
        ''')
        con.execute('''
        CREATE TABLE period (
            time_start FLOAT PRIMARY KEY,
            time_end FLOAT,
            hours INT,
            minutes INT,
            seconds INT,
            comment VARCHAR(127)
        ) 
        ''')
        con.commit()

    def start_new_period(self, comment: str = None):
        con = self.get_connection()
        con.execute('''
            INSERT INTO period(time_start, comment) VALUES
            (:time_start, :comment)
        ''', {
            'time_start': datetime.now().timestamp(),
            'comment': comment
        })
        con.commit()

    def get_current_period_pk(self) -> float | None:
        con = self.get_connection()

        current_period = con.execute('''
            SELECT time_start
            FROM period
            WHERE time_end IS NULL
        ''').fetchone()

        if current_period is not None:
            return current_period[0]

    def stop_current_period(self, comment: str = None):
        con = self.get_connection()

        # Если нет текущего периода, то остановка не требуется
        current_period_pk = self.get_current_period_pk()
        if current_period_pk is None:
            return

        time_start = datetime.fromtimestamp(current_period_pk)
        time_end = datetime.now()
        delta = time_end - time_start

        hours, minutes, seconds = seconds_to_hms(delta.seconds)

        if comment:
            con.execute('''
                UPDATE period SET comment = :comment
                WHERE time_end IS NULL
            ''', {
                'comment': comment,
            })
        con.execute('''
            UPDATE period SET
                time_end = :time_end,
                hours = :hours,
                minutes = :minutes,
                seconds = :seconds
            WHERE time_end IS NULL
        ''', {
            'time_end': time_end.timestamp(),
            'hours': hours,
            'minutes': minutes,
            'seconds': seconds,
        })
        con.commit()

    def update_current_comment(self, comment: str):
        con = self.get_connection()

        # Если нет текущего периода, то обновить не можем
        current_period_pk = self.get_current_period_pk()
        if current_period_pk is None:
            return

        con.execute('''
            UPDATE period SET comment = :comment
            WHERE time_start = time_start
        ''', {
            'comment': comment,
            'time_start': current_period_pk
        })
        con.commit()

    def get_current_statistics(self):
        con = self.get_connection()

        current_period_pk = self.get_current_period_pk()
        if current_period_pk is None:
            return

        current_period = con.execute('''
            SELECT *
            FROM period
            WHERE time_start = :time_start
        ''', {
            'time_start': current_period_pk,
        }).fetchone()

        return Period._make(current_period)

    def get_periods(self, from_time: float = 0):

        con = self.get_connection()
        rows = con.execute('''
            SELECT * FROM period
            WHERE time_start >= :from_time
        ''', {
            'from_time': from_time
        }).fetchall()
        periods = (Period._make(row) for row in rows)

        return periods


class Controller:

    def __init__(self, timer_db_class):
        self.timerDB = timer_db_class()

    def start(self, comment: str = None):
        self.timerDB.stop_current_period()
        self.timerDB.start_new_period(comment)

    def stop(self, comment: str = None):
        self.timerDB.stop_current_period(comment)

    def current(self, comment: str = None):
        if comment:
            self.timerDB.update_current_comment(comment)
        statistics = self.timerDB.get_current_statistics()
        if statistics:
            print(statistics)

    def statistics(self, days: int):

        local_zone = zoneinfo.ZoneInfo(settings['time_zone_name'])
        now = datetime.now(tz=local_zone)
        start_of_today = datetime(
            year=now.year,
            month=now.month,
            day=now.day,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo=local_zone
        )
        from_time = start_of_today - timedelta(days=days - 1)

        periods_by_date = {}

        periods = list(self.timerDB.get_periods(from_time.timestamp()))
        for period in periods:
            period_date = datetime.fromtimestamp(period.time_start, tz=local_zone).strftime('%d.%m.%Y')
            periods_by_date.setdefault(period_date, []).append(period)

        for date, _periods in periods_by_date.items():
            day_total_seconds = 0
            for period in _periods:
                print(period)
                if period.time_end is not None:
                    day_total_seconds += period.time_end - period.time_start
            h, m, s = seconds_to_hms(day_total_seconds)
            print(f'{date}\t{h:02d}:{m:02d}:{s:02d}\n')

    def init(self):
        self.timerDB.set_initial_state()

    def main(self, argv: Sequence):
        match argv:
            case (_, 'start'):
                self.start()
            case (_, 'start', comment):
                self.start(comment)
            case (_, 'stop'):
                self.stop()
            case (_, 'stop', comment):
                self.stop(comment)
            case (_, 'pause'):
                self.pause()
            case (_, 'current'):
                self.current()
            case (_, 'current', comment):
                self.current(comment)
            case (_, 'today'):
                self.statistics(1)
            case (_, days, 'days'):
                days = int(days)
                if days < 1:
                    print('введите значение >= 1')
                else:
                    self.statistics(int(days))
            case (_, 'init'):
                self.init()
            case _:
                print('неизвестная команда')


controller = Controller(TimerDB)
controller.main(sys.argv)
